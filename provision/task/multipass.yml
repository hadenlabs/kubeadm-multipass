version: "3"

tasks:
  check:
    desc: Exist multipass and dependences
    run: once
    deps:
      - task: check:multipass

  check:multipass:
    desc: Exist multipass
    run: once
    preconditions:
      - sh: command -v multipass
        msg: "Please Install multipass"

  make:path:
    desc: make paths
    run: once
    cmds:
      - task: make:path:build
      - task: make:path:build:k8s

  make:path:build:
    desc: make path build
    run: once
    cmds:
      - cmd: mkdir -p {{.BUILD_PATH}}

  make:path:build:k8s:
    desc: make path build k8s
    run: once
    cmds:
      - cmd: mkdir -p {{.K8S_BUILD_PATH}}

  launch:
    desc: launch multipass.
    run: once
    deps:
      - task: check:multipass
    cmds:
      - task: make:path
      - >-
        multipass launch --verbose --name {{.MULTIPASS_LAUNCH_NAME}} --cloud-init {{.MULTIPASS_CLOUD_INIT_FILE}} {{.MULTIPASS_ARGS}} {{.CLI_ARGS}}

  launch:k8s:master:
    desc: launch k8s master.
    run: once
    cmds:
      - task: launch
        vars:
          MULTIPASS_LAUNCH_NAME: k8s-master
          MULTIPASS_CLOUD_INIT_FILE: provision/multipass/kubernetes/master.yaml
          MULTIPASS_ARGS: -c 2 -m 2G --disk 20G
      - cmd: multipass exec {{.MULTIPASS_LAUNCH_NAME}} -- bash -c 'sudo kubeadm config images pull'
      - cmd: multipass exec {{.MULTIPASS_LAUNCH_NAME}} -- bash -c 'sudo kubeadm init --pod-network-cidr=10.1.0.0/16'

      - cmd: multipass exec {{.MULTIPASS_LAUNCH_NAME}} -- bash -c 'sudo systemctl restart kubelet'
      - cmd: multipass exec {{.MULTIPASS_LAUNCH_NAME}} -- bash -c 'sudo systemctl restart containerd'
      - cmd: multipass exec {{.MULTIPASS_LAUNCH_NAME}} -- bash -c 'sudo cat /etc/kubernetes/admin.conf' > {{.KUBECONFIG}}
        vars:
          MULTIPASS_LAUNCH_NAME: k8s-master
      - cmd: echo "now deploying tigera-operator ...."
      - cmd: KUBECONFIG={{.KUBECONFIG}} helm repo add projectcalico https://docs.tigera.io/calico/charts
      - cmd: KUBECONFIG={{.KUBECONFIG}} kubectl create namespace tigera-operator
      - cmd: KUBECONFIG={{.KUBECONFIG}} helm install calico projectcalico/tigera-operator --version v3.24.5 -f provision/k8s/system/calico/resources/helm/values.yaml --namespace tigera-operator
      - cmd: echo "wait ...."
      - cmd: sleep 60
      - cmd: KUBECONFIG={{.KUBECONFIG}} kubectl get pods -n calico-system
      - cmd: KUBECONFIG={{.KUBECONFIG}} kubectl get nodes -o wide
      - cmd: multipass exec {{.MULTIPASS_LAUNCH_NAME}} -- bash -c 'sudo kubeadm token create --print-join-command' > {{.BUILD_PATH}}/kubeadm_join.sh
        vars:
          MULTIPASS_LAUNCH_NAME: k8s-master
      - cmd: echo "Now deploying the worker nodes"
      - cmd: multipass mount {{.MOUNT_PATH_K8S_LOCAL}} {{.MULTIPASS_LAUNCH_NAME}}:/data
    vars:
      MULTIPASS_LAUNCH_NAME: k8s-master

  launch:k8s:node:
    desc: launch k8s nodes.
    run: once
    cmds:
      - task: launch
        vars:
          MULTIPASS_LAUNCH_NAME: k8s-node
          MULTIPASS_CLOUD_INIT_FILE: provision/multipass/kubernetes/node.yaml
          MULTIPASS_ARGS: -c 2 -m 2G --disk 20G
      - cmd: multipass transfer {{.BUILD_PATH}}/kubeadm_join.sh {{.MULTIPASS_LAUNCH_NAME}}:kubeadm_join.sh
      - cmd: multipass exec {{.MULTIPASS_LAUNCH_NAME}} -- bash -c 'sudo chmod +x kubeadm_join.sh'
      - cmd: multipass exec {{.MULTIPASS_LAUNCH_NAME}} -- bash -c 'sudo sh ./kubeadm_join.sh'
      - cmd: KUBECONFIG={{.KUBECONFIG}} kubectl label node {{.MULTIPASS_LAUNCH_NAME}} node-role.kubernetes.io/node=
      - cmd: KUBECONFIG={{.KUBECONFIG}} kubectl get nodes
      - cmd: multipass mount {{.MOUNT_PATH_K8S_LOCAL}} {{.MULTIPASS_LAUNCH_NAME}}:/data
    vars:
      MULTIPASS_LAUNCH_NAME: k8s-node

  make:certificates:
    desc: make certificates and export.
    run: once
    deps:
      - task: check
    cmds:
      - cmd: mkcert '*.k8s.local'
      - cmd: mkcert -install
      - cmd: mkdir -p {{.K8S_BUILD_KEYS_PATH}}/
      - cmd: mv _wildcard.k8s.local.pem {{.K8S_BUILD_KEYS_PATH}}/
      - cmd: mv _wildcard.k8s.local-key.pem {{.K8S_BUILD_KEYS_PATH}}/
    status:
      - test -f {{.K8S_BUILD_KEYS_PATH}}/_wildcard.k8s.local.pem
      - test -f {{.K8S_BUILD_KEYS_PATH}}/_wildcard.k8s.local-key.pem

  launch:traefik:
    desc: make traefik.
    run: once
    deps:
      - task: check
    cmds:
      - task: make:certificates
      - cmd: |
          cat <<EOF | KUBECONFIG={{.KUBECONFIG}} kubectl apply -f -
          apiVersion: v1
          kind: Namespace
          metadata:
            name: traefik
          EOF
      - cmd: |
          export TLS_CRT=$(cat {{.K8S_BUILD_KEYS_PATH}}/_wildcard.k8s.local.pem | base64)
          export TLS_KEY=$(cat {{.K8S_BUILD_KEYS_PATH}}/_wildcard.k8s.local-key.pem | base64)
          cat <<EOF | KUBECONFIG={{.KUBECONFIG}} kubectl apply -f -
          apiVersion: v1
          kind: Secret
          data:
            tls.crt: $TLS_CRT
            tls.key: $TLS_KEY
          metadata:
            name: traefik-tls-cert
            namespace: traefik
          type: kubernetes.io/tls
          EOF
      - cmd: KUBECONFIG={{.KUBECONFIG}} kubectl apply -f {{.K8S_PROVISION_PATH}}/overlays/core/traefik/crd.yaml -n traefik
